#!/usr/bin/env python
"""
Simple console-based uploader.
"""

import argparse
import logging
import sys
#noinspection PyUnresolvedReferences
import emdu.signal_handlers
from emdu.console_client import client

logging.basicConfig(format='%(asctime)s: %(message)s', level=logging.DEBUG)

parser = argparse.ArgumentParser(
    description="A simple, minimalistic EVE market data uploader.",
)
parser.add_argument(
    '--add-eve', action='append', dest='eve_dirs',
    help="Appends an EVE install dir to the defaults. You may use this multiple times " \
         "in order to add multiple installations.")
parser.add_argument(
    '--enable-deletion', action='store_true', dest='delete_cache', default=False,
    help="Enable deletion of cache files after read.")
parser.add_argument(
    '--scan-interval', action='store', dest='scan_interval', default=2.0,
    help="Cache file scan interval. Defaults to every 2 seconds.")
parser.add_argument(
    '--upload-workers', action='store', dest='upload_workers', default=1,
    help="Determines number of uploader processes to spawn. Defaults to 1.")
parser.add_argument(
    '--endpoint', action='store', dest='scan_endpoint', default='http://upload.eve-emdr.com/upload/',
    help="Where to send the market data. Defaults to http://upload.eve-emdr.com/upload/ .")

# Let's get this party started.
if __name__ == '__main__':
    parsed = parser.parse_args()

    try:
        scan_interval = float(parsed.scan_interval)
    except (TypeError, ValueError):
        logging.error("Invalid scan interval.")
        sys.exit(1)

    try:
        upload_workers = int(parsed.upload_workers)
    except (TypeError, ValueError):
        logging.error("Invalid upload workers integer.")
        sys.exit(1)

    try:
        endpoint = parsed.scan_endpoint
        logging.info("Got scan_endpoint %s" % endpoint)
    except (TypeError, ValueError):
        logging.error("Invalid scan endpoint")
        sys.exit(1)

    client.run(
        additional_eve_dirs=parsed.eve_dirs,
        delete_cache=parsed.delete_cache,
        cache_scan_interval=scan_interval,
        upload_workers=upload_workers,
        scan_endpoint=parsed.scan_endpoint,
    )

